package com.hanium.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.hanium.domain.ControlledItemsVO;
import com.hanium.domain.DAVO;
import com.hanium.domain.ValTargetFacilityVO;
import com.hanium.domain.VulnerabilityVO;
import com.hanium.service.ControlledItemsService;
import com.hanium.service.DAService;
import com.hanium.service.ValTargetFacilityService;
import com.hanium.service.VulnerabilityService;

import lombok.AllArgsConstructor;
import lombok.extern.log4j.Log4j;

@Controller
@Log4j
@RequestMapping("/vulnerability/*")
@AllArgsConstructor
public class VulnerabilityController {

	private VulnerabilityService service;
	private ControlledItemsService service_ci;
	private DAService service_da;
	private ValTargetFacilityService service_tf;

	@GetMapping("/vul_list")
	public void new_vul_list(Model model) { // addAttribute메소드를 이용해 Model객체에 담아서 전달
		log.info("[CONTROLLER]get list...");
		model.addAttribute("list", service.getList());
	}

	@GetMapping("/vul_register")
	public void new_vul_register(Model model) {
		model.addAttribute("models", service_da.modelList());
		model.addAttribute("manufacturer", service_da.manufacturerList());
		model.addAttribute("ci_list", service_ci.get("1"));

		// service.register(vul);
	}

	@GetMapping(value = "/select_ci_number")
	public @ResponseBody List<ControlledItemsVO> search_keyword(@RequestParam("number") String number) {
		log.info(number);
		List<ControlledItemsVO> ci_list = service_ci.getCIDetailList(number);

		ci_list.forEach(i -> log.info(i));
		return ci_list;
	}

	@SuppressWarnings("null")
	@PostMapping("/register") // 글을 등록하는 경우에는 get방식이 아니라 post방식을 사용한다.
	public String register(VulnerabilityVO vul) { // RedirectAttributes :
		log.info("[CONTROLLER]register : " + vul.getVul_ci_id());
		if (vul.getVul_ci_id().equals(""))
			vul.setVul_ci_id(null);
		// 1. 취약점 등록
		service.register(vul);
		// 2. 등록된 취약점 id 가져오기
		int vul_id = service.findPK();
		log.info(vul_id);

		// 3. 취약점 영향 설비 리스트 등록
		if (vul.getVul_ci_id() != null) { // 관련 통제항목이 있는 경우
			// log.info("관련 통제항목이 있음");
			List<DAVO> da = service_da.getVulTargetList_CI(vul.getVul_Manufacturer(), vul.getVal_model(),
					vul.getVal_systemSW(),vul_id);
			ControlledItemsVO ci = service_ci.get(vul.getVul_ci_id().toString());

			if (!da.isEmpty()) {
				// 통제항목 관리 유형이면 yes_da리스트에 추가
				List<String> yes_da = new ArrayList<String>();
				if (ci.getCI_BOP().toString().equals("Y")) {
					yes_da.add("BOP DA");

				}
				if (ci.getCI_EP().toString().equals("Y")) {
					yes_da.add("EP DA");
				}
				if (ci.getCI_indirect().toString().equals("Y")) {
					yes_da.add("Indirect DA");
				}
				if (ci.getCI_CF_HF().toString().equals("Y")) {
					yes_da.add("Control Facilities HF");
				}
				if (ci.getCI_CF_MF().toString().equals("Y")) {
					yes_da.add("Control Facilities LF");
				}
				if (ci.getCI_CF_LF().toString().equals("Y")) {
					yes_da.add("Control Facilities LF");
				}
				if (ci.getCI_FF_HF().toString().equals("Y")) {
					yes_da.add("Field Facilities HF");
				}
				if (ci.getCI_FF_MF().toString().equals("Y")) {
					yes_da.add("Field Facilities MF");
				}
				if (ci.getCI_FF_LF().toString().equals("Y")) {
					yes_da.add("Field Facilities LF");
				}
				if (ci.getCI_pcServer().toString().equals("Y")) {
					yes_da.add("PC/Server");
				}
				/*
				 * for(int i=0; i<yes_da.size(); i++) { log.info(yes_da.get(i)); }
				 */

				ValTargetFacilityVO vulfacility = new ValTargetFacilityVO();
				for (int i = 0; i < da.size(); i++) {
					// log.info("[DA] "+da.get(i).getDaIdentifyType());
					for (int j = 0; j < yes_da.size(); j++) {
						// log.info("[yes_da] "+yes_da.get(j));
						if (yes_da.get(j).equals(da.get(i).getDaIdentifyType())) {
							vulfacility.setVul_daID(da.get(i).getDaid());
							vulfacility.setVul_daName(da.get(i).getDaname());
							vulfacility.setVul_id(vul_id);
							service_tf.register(vulfacility);
						}
					}
				}
			}

		} else {
			log.info("관련 통제항목이 없음");
			log.info(vul.getVal_model());
			log.info(vul.getVal_systemSW());
			log.info(vul.getVul_Manufacturer());
			List<DAVO> da = service_da.getVulTargetList_CI(vul.getVul_Manufacturer(), vul.getVal_model(),
					vul.getVal_systemSW(),vul_id);
			da.forEach(i -> log.info(i));
			ValTargetFacilityVO vulfacility = new ValTargetFacilityVO();

			for (int i = 0; i < da.size(); i++) {
				vulfacility.setVul_daID(da.get(i).getDaid());
				vulfacility.setVul_daName(da.get(i).getDaname());
				vulfacility.setVul_id(vul_id);
				service_tf.register(vulfacility);
			}

		}

		// rttr.addFlashAttribute("result",dept.getDeptcode());
		return "redirect:/vulnerability/vul_list";

	}

	@GetMapping("/vul_detail")
	public void get(@RequestParam("Vul_id") Long Vul_id, Model model) {
		log.info("------vul_detail-------");
		// log.info(service.get(Vul_id).getVul_regDate());
		VulnerabilityVO vul = service.get(Vul_id);
		
		model.addAttribute("vul", vul);
		ControlledItemsVO ci = null;
		if (vul.getVul_ci_id() != null) {
			ci = service_ci.get(vul.getVul_ci_id().toString());
			model.addAttribute("ci", ci);
		}

		List<DAVO> da = null;
		
		/*갱신 데이터*/
		if(service_da.getVulTargetList_CI(vul.getVul_Manufacturer(), vul.getVal_model(), vul.getVal_systemSW(), Vul_id.intValue()).isEmpty()) {
			log.info("null");
		}else{
			log.info("갱신 da 존재");
			da = service_da.getVulTargetList_CI(vul.getVul_Manufacturer(), vul.getVal_model(), vul.getVal_systemSW(), Vul_id.intValue());
			da.forEach(i -> log.info(i));

		}
		
		//대상 설비 DA데이터 갱신
		if (da != null) {
			//통제항목 있는 경우
			if(ci!=null) {
				log.info("통제항목 있음");
				List<String> yes_da = new ArrayList<String>();
				if (ci.getCI_BOP().toString().equals("Y")) {
					yes_da.add("BOP DA");

				}
				if (ci.getCI_EP().toString().equals("Y")) {
					yes_da.add("EP DA");
				}
				if (ci.getCI_indirect().toString().equals("Y")) {
					yes_da.add("Indirect DA");
				}
				if (ci.getCI_CF_HF().toString().equals("Y")) {
					yes_da.add("Control Facilities HF");
				}
				if (ci.getCI_CF_MF().toString().equals("Y")) {
					yes_da.add("Control Facilities LF");
				}
				if (ci.getCI_CF_LF().toString().equals("Y")) {
					yes_da.add("Control Facilities LF");
				}
				if (ci.getCI_FF_HF().toString().equals("Y")) {
					yes_da.add("Field Facilities HF");
				}
				if (ci.getCI_FF_MF().toString().equals("Y")) {
					yes_da.add("Field Facilities MF");
				}
				if (ci.getCI_FF_LF().toString().equals("Y")) {
					yes_da.add("Field Facilities LF");
				}
				if (ci.getCI_pcServer().toString().equals("Y")) {
					yes_da.add("PC/Server");
				}
				

				ValTargetFacilityVO vulfacility = new ValTargetFacilityVO();
				for (int i = 0; i < da.size(); i++) {
					// log.info("[DA] "+da.get(i).getDaIdentifyType());
					for (int j = 0; j < yes_da.size(); j++) {
						// log.info("[yes_da] "+yes_da.get(j));
						if (yes_da.get(j).equals(da.get(i).getDaIdentifyType())) {
							vulfacility.setVul_daID(da.get(i).getDaid());
							vulfacility.setVul_daName(da.get(i).getDaname());
							vulfacility.setVul_id(Vul_id.intValue());
							service_tf.register(vulfacility);
						}
					}
				}
				log.info("대상 설비 갱신 완료");
			}else {
				log.info("통제항목 없음");
				ValTargetFacilityVO vulfacility = new ValTargetFacilityVO();

				for (int i = 0; i < da.size(); i++) {
					vulfacility.setVul_daID(da.get(i).getDaid());
					vulfacility.setVul_daName(da.get(i).getDaname());
					vulfacility.setVul_id(Vul_id.intValue());
					service_tf.register(vulfacility);
				}
				log.info("대상 설비 갱신 완료");
			}
		}
		
		
		model.addAttribute("targets", service_tf.targetDAList(vul.getVul_id()));

	}

	@PostMapping("/modify")
	public String modify(VulnerabilityVO vul) {
		log.info("[ CONTROLLER ] modify:" + vul);
		service.modify(vul);
		return "success";
	}

}
